<!--- /*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */ --->
 <%
   var privilegesInfo = new Packages.org.apache.sling.jcr.jackrabbit.accessmanager.PrivilegesInfo();
   if (!privilegesInfo.canReadAccessControl(currentNode)) {
      //no rights to view the access control of the node, so just return a 404 status
      response.sendError(404);
   } else { 
      var canModify = privilegesInfo.canModifyAccessControl(currentNode);

      var accessMap = privilegesInfo.getDeclaredAccessRights(currentNode);
      var entrySet = accessMap.entrySet();
      var iterator = entrySet.iterator();

      while (iterator.hasNext()) {
        var entry = iterator.next();
        var principal = entry.getKey();
        var accessrights = entry.getValue();

        
      }
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" lang="en"
      xmlns="http://www.w3.org/1999/xhtml"
>
<head>
   <meta http-equiv="content-type" content="text/html; charset=utf-8" />
   <title>Access Control List : <%=currentNode.name%></title>

   <!-- CSS Style sheet for page -->
   <link rel="stylesheet" type="text/css" href="<%= request.getContextPath() %>/../../apps/sling/servlet/default/toe.css">
</head>

<body>

<!-- Global Vars for Client, should turn into server side render later -->
<script>
   var currentNodePath = "<%=currentNode.path%>";
   var contextPath = "<%=request.contextPath%>";
   var canModifyClient = <%= canModify %>;

    //var iteratorClient = <%= iterator %>;
</script>

<h2> Hi there. The below should be React components </h2>
<%= <h1> This should be server sided only </h1> %>

   <div id="title-test"> Mange Access Control ... should appear here </div>

   <!-- <h1>Manage Access Control For: <%=currentNode.path%></h1> -->

   <% if (canModify) { %>
      <div id="user-entry-form"> </div>
   <% } %>

   <div id="access-control-entries"> </div>

   <div> Here is a Game component </div>
   <div class="games">GameHere</div>

   <div> Here is reusing the Game component </div>
   <div class="games">GameHere</div>

  <!-- Load React. -->
  <!-- Note: when deploying, replace "development.js" with "production.min.js". -->
  <script src="https://unpkg.com/react@16/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js" crossorigin></script>

  <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>

   <!-- Load our React component. -->
   <!-- Note the type="text/babel" indicates that this uses JSX -->
  <script type="text/babel" src="<%= request.getContextPath() %>/../../apps/sling/servlet/default/toe.js"></script>

  <!-- <script type="text/babel" src="/../../apps/sling/servlet/default/aclComponents.js">
  </script> -->

<script type="text/babel">
   class TitleBar extends React.Component {
  render() {
    return (
        <h1>Manage Access Control For: { currentNodePath } </h1>
      )
  }
}

class UserEntryForm extends React.Component {
  render() {
    var actionPath = contextPath + currentNodePath + ".ace.html";
    return (
       <fieldset>
          <legend>Add an entry for a user or group</legend>
          <form method="GET" action={ actionPath }>
             <label htmlFor="addpid">Principal Name:</label> 
             <input id="addpid" type="text" name="pid" placeholder="" />
             <input type="submit" placeholder="Add"/>
          </form>
       </fieldset>
    )
  }
}

class AccessControlEntries extends React.Component {
  render() {
    var actionPath = contextPath + currentNodePath + ".deleteAce.html";
    return (
     <fieldset>
        <legend>Current access control entries</legend>

        <form method="POST" action={ actionPath } >
           <input type="hidden" name=":redirect" placeholder={ contextPath } />
           
           <table width="100%">
              <thead>
                 <tr>
                    <th align="left" width="60%">Principal</th>
                    <th align="center" width="25%">Privileges</th>
                    <th align="center" width="15%">
                      { canModifyClient ? 'Remove' : '' } 
                    </th>
                 </tr>
              </thead>
              <tbody>
                 while (iteratorClient.hasNext()) {
                    var entry = iterator.next();
                    var principal = entry.getKey();
                    var accessrights = entry.getValue();
                 <tr>
                    <td align="left" width="60%" >
                        if (canModify) { 
                          <a href=".ace.html?pid=">
                             =principal.getName()
                          </a>
                       } else { 
                          principal.getName()
                        } 
                    </td>
                    <td align="center" width="25%" >
                       accessrights.getPrivilegeSetDisplayName(request.locale)
                    </td>
                    <td align="center" width="15%">
                        if (canModify) { 
                          <input type="checkbox" name=":applyTo" value="asdf" />
                          }
                    </td>
                 </tr>
                 }
              </tbody>
              <tfoot>
                 <tr>
                    <td colSpan="2"></td>
                    <td align="center"><input type="submit" value="Remove Selected" style={{color:'red'}}/></td>
                 </tr>
              </tfoot>
           </table>
        </form>
     </fieldset>
      )
  }
}

ReactDOM.render(
  <TitleBar />,
  document.getElementById('title-test')
);

ReactDOM.render(
  <UserEntryForm />,
  document.getElementById('user-entry-form')
);

ReactDOM.render(
  <AccessControlEntries />,
  document.getElementById('access-control-entries')
);

</script>

</body>
</html>
<%   
   }
%>
