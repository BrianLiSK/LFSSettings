<!--- /*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */ --->
 <%
   var privilegesInfo = new Packages.org.apache.sling.jcr.jackrabbit.accessmanager.PrivilegesInfo();
   if (!privilegesInfo.canReadAccessControl(currentNode)) {
      //no rights to view the access control of the node, so just return a 404 status
      response.sendError(404);
   } else { 
      var canModify = privilegesInfo.canModifyAccessControl(currentNode);

      var accessMap = privilegesInfo.getDeclaredAccessRights(currentNode);
      var entrySet = accessMap.entrySet();
      var iterator = entrySet.iterator();

      var arrayOfNames = [];
      var arrayOfPrivilageDisplayNames = [];

      while (iterator.hasNext()) {
        var entry = iterator.next();
        var principal = entry.getKey();
        var accessrights = entry.getValue();

        arrayOfNames.push(String(principal.getName()));
        arrayOfPrivilageDisplayNames.push(String(accessrights.getPrivilegeSetDisplayName(request.locale)));
      }
   //console.log(stringArrayTest);

   arrayOfNames = JSON.stringify(arrayOfNames);
   arrayOfPrivilageDisplayNames = JSON.stringify(arrayOfPrivilageDisplayNames);
%>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xml:lang="en" lang="en"
      xmlns="http://www.w3.org/1999/xhtml"
>
<head>
   <meta http-equiv="content-type" content="text/html; charset=utf-8" />
   <title>Access Control List : <%=currentNode.name%></title>

   <!-- CSS Style sheet for page -->
   <link rel="stylesheet" type="text/css" href="<%= request.getContextPath() %>/../../apps/sling/servlet/default/toe.css">
</head>

<body>

<!-- Global Vars for Client, should turn into server side render later -->
<!-- These paths are used as strings to display directly -->
<script>
   var currentNodePath = "<%=currentNode.path%>";
   var contextPath = "<%=request.contextPath%>";
   var canModifyClient = <%= canModify %>;

   var arrayOfNamesClient = <%= arrayOfNames %>; // TODO: Breaks with more than one
   var arrayOfPrivilageDisplayNamesClient = <%= arrayOfPrivilageDisplayNames %>;
   console.log(arrayOfNamesClient);
   console.log(arrayOfPrivilageDisplayNamesClient);

</script>

<h2> Hi there. The below should be React components </h2>
<%= <h1> The following is being client rendered </h1> %>

  <div id="main-container"> </div>

   <div> Here is a Game component </div>
   <div class="games">GameHere</div>

   <div> Here is reusing the Game component </div>
   <div class="games">GameHere</div>

   <div> Live table here </div>
   <div id=table-test class=table-test-class></div>

   <div>Button is here </div>
   <div id=button-test></div>

  <!-- Load React. -->
  <!-- Note: when deploying, replace "development.js" with "production.min.js". -->
  <script src="https://unpkg.com/react@16/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js" crossorigin></script>

  <!-- Load Babel transpiler to allow for JSX when writing React components. Without this, we can only write in plain JS -->
  <script src="https://unpkg.com/babel-standalone@6/babel.min.js"></script>

   <!-- Load our React component. -->
   <!-- Note the type="text/babel" indicates that this uses JSX -->
  <script type="text/babel" src="<%= request.getContextPath() %>/../../apps/sling/servlet/default/toe.js"></script>

  <script type="text/babel" src="/../../apps/sling/servlet/default/aclComponents.js">
  </script> 

  <!-- Material UI and corresponding stylesheet -->
  <script src="https://unpkg.com/@material-ui/core/umd/material-ui.production.min.js" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500">

  <!-- Proptypes development version -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.6.0/prop-types.js"></script>

  <!-- ClassNames development version -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/classnames/2.2.5/index.js"></script>

  <script type="text/babel" src="/../../apps/sling/servlet/default/userTable.js">
  </script> 
  <script type="text/babel" src="/../../apps/sling/servlet/default/buttonTest.js">
  </script> 

</body>
</html>
<%   
   }
%>
